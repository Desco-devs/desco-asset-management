import { NextRequest, NextResponse } from 'next/server';
import { withResourcePermission, AuthenticatedUser } from '@/lib/auth/api-auth';
import { prisma } from '@/lib/prisma';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import * as XLSX from 'xlsx';

// GET /api/equipments/maintenance-reports/export - Export equipment maintenance reports
export const GET = withResourcePermission('maintenance_reports', 'view', async (request: NextRequest, _user: AuthenticatedUser) => {
  try {
    const { searchParams } = new URL(request.url);
    const format = searchParams.get('format') || 'pdf';
    const reportType = searchParams.get('reportType') || 'summary';
    const equipmentId = searchParams.get('equipmentId');
    const status = searchParams.get('status');
    const priority = searchParams.get('priority');
    const startDate = searchParams.get('startDate');
    const endDate = searchParams.get('endDate');

    // Build where clause for filtering
    const where: any = {};

    if (equipmentId && equipmentId !== 'ALL_EQUIPMENTS') {
      where.equipment_id = equipmentId;
    }

    if (status && status !== 'ALL_STATUS') {
      where.status = status;
    }

    if (priority && priority !== 'ALL_PRIORITIES') {
      where.priority = priority;
    }

    if (startDate || endDate) {
      where.date_reported = {};
      if (startDate) {
        where.date_reported.gte = new Date(startDate);
      }
      if (endDate) {
        where.date_reported.lte = new Date(endDate);
      }
    }

    // Fetch maintenance reports with full relations
    const reports = await prisma.maintenance_equipment_report.findMany({
      where,
      include: {
        equipment: {
          include: {
            project: {
              include: {
                client: {
                  include: {
                    location: true
                  }
                }
              }
            }
          }
        },
        location: true,
        reported_user: {
          select: {
            id: true,
            username: true,
            full_name: true
          }
        },
        repaired_user: {
          select: {
            id: true,
            username: true,
            full_name: true
          }
        }
      },
      orderBy: {
        date_reported: 'desc'
      }
    });

    if (reports.length === 0) {
      return NextResponse.json({ error: 'No maintenance reports found for export' }, { status: 404 });
    }

    // Generate export based on format
    if (format === 'pdf') {
      const pdfBuffer = await generatePDF(reports, reportType, _user);
      
      return new NextResponse(pdfBuffer, {
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="equipment-maintenance-reports-${new Date().toISOString().split('T')[0]}.pdf"`
        }
      });
    } else if (format === 'excel') {
      const excelBuffer = await generateExcel(reports, reportType, _user);
      
      return new NextResponse(excelBuffer, {
        headers: {
          'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          'Content-Disposition': `attachment; filename="equipment-maintenance-reports-${new Date().toISOString().split('T')[0]}.xlsx"`
        }
      });
    } else {
      return NextResponse.json({ error: 'Unsupported export format. Use pdf or excel.' }, { status: 400 });
    }

  } catch (error) {
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
});

// Generate PDF report for equipment
async function generatePDF(reports: any[], reportType: string, _user: AuthenticatedUser): Promise<Buffer> {
  const doc = new jsPDF();
  
  // Header
  doc.setFontSize(20);
  doc.text('Equipment Maintenance Reports', 105, 15, { align: 'center' });
  
  doc.setFontSize(12);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 25, { align: 'center' });
  doc.text(`Generated by: ${_user.full_name || _user.username}`, 105, 32, { align: 'center' });
  doc.text(`Total Reports: ${reports.length}`, 105, 39, { align: 'center' });

  let yPosition = 50;

  if (reportType === 'summary') {
    // Summary report with table
    const summaryData = reports.map(report => [
      `${report.equipment.brand} ${report.equipment.model}`,
      report.equipment.plate_number || 'N/A',
      report.status || 'N/A',
      report.priority || 'N/A',
      report.date_reported ? new Date(report.date_reported).toLocaleDateString() : 'N/A',
      report.date_repaired ? new Date(report.date_repaired).toLocaleDateString() : 'Pending',
      report.issue_description.substring(0, 50) + (report.issue_description.length > 50 ? '...' : '')
    ]);

    autoTable(doc, {
      head: [['Equipment', 'Plate #', 'Status', 'Priority', 'Reported', 'Repaired', 'Issue']],
      body: summaryData,
      startY: yPosition,
      styles: { fontSize: 8, cellPadding: 2 },
      headStyles: { fillColor: [66, 139, 202] },
      alternateRowStyles: { fillColor: [245, 245, 245] }
    });
  } else {
    // Detailed report
    reports.forEach((report, index) => {
      // Check if we need a new page
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }

      // Report header
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text(`Report #${index + 1}: ${report.equipment.brand} ${report.equipment.model}`, 20, yPosition);
      yPosition += 10;

      // Equipment info
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text(`Plate Number: ${report.equipment.plate_number || 'N/A'}`, 20, yPosition);
      doc.text(`Project: ${report.equipment.project.name}`, 120, yPosition);
      yPosition += 7;
      
      doc.text(`Client: ${report.equipment.project.client.name}`, 20, yPosition);
      doc.text(`Location: ${report.location.address}`, 120, yPosition);
      yPosition += 7;

      // Report details
      doc.text(`Status: ${report.status || 'N/A'}`, 20, yPosition);
      doc.text(`Priority: ${report.priority || 'N/A'}`, 120, yPosition);
      yPosition += 7;

      doc.text(`Reported: ${report.date_reported ? new Date(report.date_reported).toLocaleDateString() : 'N/A'}`, 20, yPosition);
      doc.text(`Repaired: ${report.date_repaired ? new Date(report.date_repaired).toLocaleDateString() : 'Pending'}`, 120, yPosition);
      yPosition += 7;

      doc.text(`Reported by: ${report.reported_user?.full_name || 'N/A'}`, 20, yPosition);
      if (report.repaired_user) {
        doc.text(`Repaired by: ${report.repaired_user.full_name}`, 120, yPosition);
      }
      yPosition += 10;

      // Issue description
      doc.setFont('helvetica', 'bold');
      doc.text('Issue Description:', 20, yPosition);
      yPosition += 7;
      doc.setFont('helvetica', 'normal');
      const issueLines = doc.splitTextToSize(report.issue_description || 'N/A', 170);
      doc.text(issueLines, 20, yPosition);
      yPosition += issueLines.length * 5 + 5;

      // Action taken (if available)
      if (report.action_taken) {
        doc.setFont('helvetica', 'bold');
        doc.text('Action Taken:', 20, yPosition);
        yPosition += 7;
        doc.setFont('helvetica', 'normal');
        const actionLines = doc.splitTextToSize(report.action_taken, 170);
        doc.text(actionLines, 20, yPosition);
        yPosition += actionLines.length * 5 + 5;
      }

      // Parts replaced (if any)
      if (report.parts_replaced && report.parts_replaced.length > 0) {
        doc.setFont('helvetica', 'bold');
        doc.text('Parts Replaced:', 20, yPosition);
        yPosition += 7;
        doc.setFont('helvetica', 'normal');
        doc.text(report.parts_replaced.join(', '), 20, yPosition);
        yPosition += 7;
      }

      // Separator line
      doc.line(20, yPosition, 190, yPosition);
      yPosition += 15;
    });
  }

  return Buffer.from(doc.output('arraybuffer'));
}

// Generate Excel report for equipment
async function generateExcel(reports: any[], reportType: string, _user: AuthenticatedUser): Promise<Buffer> {
  const workbook = XLSX.utils.book_new();
  
  if (reportType === 'summary') {
    // Summary worksheet
    const summaryData = reports.map(report => ({
      'Equipment': `${report.equipment.brand} ${report.equipment.model}`,
      'Plate Number': report.equipment.plate_number || 'N/A',
      'Project': report.equipment.project.name,
      'Client': report.equipment.project.client.name,
      'Location': report.location.address,
      'Status': report.status || 'N/A',
      'Priority': report.priority || 'N/A',
      'Date Reported': report.date_reported ? new Date(report.date_reported).toLocaleDateString() : 'N/A',
      'Date Repaired': report.date_repaired ? new Date(report.date_repaired).toLocaleDateString() : 'Pending',
      'Reported By': report.reported_user?.full_name || 'N/A',
      'Repaired By': report.repaired_user?.full_name || 'N/A',
      'Issue Description': report.issue_description || 'N/A',
      'Downtime Hours': report.downtime_hours || 'N/A'
    }));

    const worksheet = XLSX.utils.json_to_sheet(summaryData);
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Summary Report');
  } else {
    // Detailed worksheets
    const detailedData = reports.map(report => ({
      'Equipment': `${report.equipment.brand} ${report.equipment.model}`,
      'Plate Number': report.equipment.plate_number || 'N/A',
      'Project': report.equipment.project.name,
      'Client': report.equipment.project.client.name,
      'Location': report.location.address,
      'Status': report.status || 'N/A',
      'Priority': report.priority || 'N/A',
      'Date Reported': report.date_reported ? new Date(report.date_reported) : null,
      'Date Repaired': report.date_repaired ? new Date(report.date_repaired) : null,
      'Reported By': report.reported_user?.full_name || 'N/A',
      'Repaired By': report.repaired_user?.full_name || 'N/A',
      'Issue Description': report.issue_description || 'N/A',
      'Inspection Details': report.inspection_details || 'N/A',
      'Action Taken': report.action_taken || 'N/A',
      'Parts Replaced': report.parts_replaced?.join(', ') || 'N/A',
      'Downtime Hours': report.downtime_hours || 'N/A',
      'Remarks': report.remarks || 'N/A',
      'Attachments Count': report.attachment_urls?.length || 0
    }));

    const worksheet = XLSX.utils.json_to_sheet(detailedData);
    
    // Auto-fit columns
    const columnWidths = Object.keys(detailedData[0] || {}).map(() => ({ wch: 15 }));
    worksheet['!cols'] = columnWidths;

    XLSX.utils.book_append_sheet(workbook, worksheet, 'Detailed Report');
  }

  // Add metadata sheet
  const metadataSheet = XLSX.utils.json_to_sheet([
    {
      'Generated On': new Date().toLocaleString(),
      'Generated By': _user.full_name || _user.username,
      'Total Reports': reports.length,
      'Report Type': reportType,
      'User Role': _user.role
    }
  ]);
  XLSX.utils.book_append_sheet(workbook, metadataSheet, 'Export Info');

  return Buffer.from(XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' }));
}