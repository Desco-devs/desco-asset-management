generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id                           String                         @id @db.Uuid
  username                     String                         @unique
  full_name                    String
  phone                        String?
  user_profile                 String?
  role                         Role                           @default(VIEWER)
  user_status                  user_status                    @default(ACTIVE)
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime                       @updatedAt
  is_online                    Boolean                        @default(false)
  last_seen                    DateTime?
  created_clients              client[]                       @relation("ClientCreatedBy")
  created_equipments           equipment[]                    @relation("EquipmentCreatedBy")
  created_locations            location[]                     @relation("LocationCreatedBy")
  repaired_maintenance         maintenance_equipment_report[] @relation("RepairedBy")
  reported_maintenance         maintenance_equipment_report[] @relation("ReportedBy")
  repaired_vehicle_maintenance maintenance_vehicle_report[]   @relation("VehicleRepairedBy")
  reported_vehicle_maintenance maintenance_vehicle_report[]   @relation("VehicleReportedBy")
  // CHAT APP TEMPORARILY DISABLED FOR PRODUCTION BUILD
  // sent_messages                message[]                      @relation("MessageCreatedBy")
  created_projects             project[]                      @relation("ProjectCreatedBy")
  // CHAT APP TEMPORARILY DISABLED FOR PRODUCTION BUILD
  // sent_invitations             room_invitation[]              @relation("InvitationSentBy")
  // received_invitations         room_invitation[]              @relation("InvitationSentTo")
  // room_memberships             room_member[]                  @relation("UserRoomMember")
  // owned_rooms                  room[]                         @relation("RoomOwner")
  created_vehicles             vehicle[]                      @relation("VehicleCreatedBy")

  @@index([role])
  @@index([user_status])
  @@index([created_at])
  @@map("users")
}

// CHAT APP TEMPORARILY DISABLED FOR PRODUCTION BUILD
// model room {
//   id          String            @id @default(uuid()) @db.Uuid
//   name        String
//   type        room_type         @default(GROUP)
//   description String?
//   avatar_url  String?
//   owner_id    String            @db.Uuid
//   created_at  DateTime          @default(now())
//   updated_at  DateTime          @updatedAt
//   messages    message[]
//   invitations room_invitation[]
//   members     room_member[]
//   owner       user              @relation("RoomOwner", fields: [owner_id], references: [id], onDelete: Cascade)

//   @@index([owner_id])
//   @@index([type])
//   @@index([created_at])
//   @@map("rooms")
// }

// CHAT APP TEMPORARILY DISABLED FOR PRODUCTION BUILD
// model room_member {
//   id        String    @id @default(uuid()) @db.Uuid
//   room_id   String    @db.Uuid
//   user_id   String    @db.Uuid
//   joined_at DateTime  @default(now())
//   last_read DateTime?
//   room      room      @relation(fields: [room_id], references: [id], onDelete: Cascade)
//   user      user      @relation("UserRoomMember", fields: [user_id], references: [id], onDelete: Cascade)

//   @@unique([room_id, user_id])
//   @@index([room_id])
//   @@index([user_id])
//   @@map("room_members")
// }

// CHAT APP TEMPORARILY DISABLED FOR PRODUCTION BUILD
// model message {
//   id          String       @id @default(uuid()) @db.Uuid
//   room_id     String       @db.Uuid
//   sender_id   String       @db.Uuid
//   content     String
//   type        message_type @default(TEXT)
//   file_url    String?
//   reply_to_id String?      @db.Uuid
//   edited_at   DateTime?
//   created_at  DateTime     @default(now())
//   updated_at  DateTime     @updatedAt
//   reply_to    message?     @relation("MessageReply", fields: [reply_to_id], references: [id])
//   replies     message[]    @relation("MessageReply")
//   room        room         @relation(fields: [room_id], references: [id], onDelete: Cascade)
//   sender      user         @relation("MessageCreatedBy", fields: [sender_id], references: [id], onDelete: Cascade)

//   @@index([room_id])
//   @@index([sender_id])
//   @@index([created_at])
//   @@index([reply_to_id])
//   @@map("messages")
// }

// CHAT APP TEMPORARILY DISABLED FOR PRODUCTION BUILD
// model room_invitation {
//   id           String            @id @default(uuid()) @db.Uuid
//   room_id      String            @db.Uuid
//   invited_by   String            @db.Uuid
//   invited_user String            @db.Uuid
//   status       invitation_status @default(PENDING)
//   message      String?
//   created_at   DateTime          @default(now())
//   responded_at DateTime?
//   inviter      user              @relation("InvitationSentBy", fields: [invited_by], references: [id], onDelete: Cascade)
//   invitee      user              @relation("InvitationSentTo", fields: [invited_user], references: [id], onDelete: Cascade)
//   room         room              @relation(fields: [room_id], references: [id], onDelete: Cascade)

//   @@unique([room_id, invited_user])
//   @@index([room_id])
//   @@index([invited_user])
//   @@index([invited_by])
//   @@index([status])
//   @@map("room_invitations")
// }

model location {
  id                            String                         @id @default(uuid()) @db.Uuid
  address                       String
  created_at                    DateTime                       @default(now())
  updated_at                    DateTime                       @updatedAt
  created_by                    String?                        @db.Uuid
  clients                       client[]
  user                          user?                          @relation("LocationCreatedBy", fields: [created_by], references: [id])
  maintenance_equipment_reports maintenance_equipment_report[]
  maintenance_vehicle_reports   maintenance_vehicle_report[]

  @@index([created_by])
  @@index([created_at])
  @@map("locations")
}

model client {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  location_id String    @db.Uuid
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  created_by  String?   @db.Uuid
  user        user?     @relation("ClientCreatedBy", fields: [created_by], references: [id])
  location    location  @relation(fields: [location_id], references: [id], onDelete: Cascade)
  projects    project[]

  @@index([location_id])
  @@index([created_by])
  @@index([name])
  @@index([created_at])
  @@map("clients")
}

model project {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  client_id  String      @db.Uuid
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  created_by String?     @db.Uuid
  equipments equipment[]
  client     client      @relation(fields: [client_id], references: [id], onDelete: Cascade)
  user       user?       @relation("ProjectCreatedBy", fields: [created_by], references: [id])
  vehicles   vehicle[]

  @@index([client_id])
  @@index([created_by])
  @@index([name])
  @@index([created_at])
  @@map("projects")
}

model equipment {
  id                          String                         @id @default(uuid()) @db.Uuid
  brand                       String
  model                       String
  type                        String
  insurance_expiration_date   DateTime?                      @default(now())
  before                      Int?
  status                      status
  remarks                     String?
  owner                       String
  image_url                   String?
  inspection_date             DateTime?
  project_id                  String                         @db.Uuid
  plate_number                String?
  original_receipt_url        String?
  equipment_registration_url  String?
  thirdparty_inspection_image String?
  pgpc_inspection_image       String?
  equipment_parts             String[]
  created_at                  DateTime                       @default(now())
  updated_at                  DateTime                       @updatedAt
  created_by                  String?                        @db.Uuid
  user                        user?                          @relation("EquipmentCreatedBy", fields: [created_by], references: [id])
  project                     project                        @relation(fields: [project_id], references: [id], onDelete: Cascade)
  maintenance_reports         maintenance_equipment_report[]

  @@index([project_id])
  @@index([created_by])
  @@index([status])
  @@index([type])
  @@index([brand])
  @@index([inspection_date])
  @@index([insurance_expiration_date])
  @@index([created_at])
  @@map("equipment")
}

model vehicle {
  id                    String                       @id @default(uuid()) @db.Uuid
  brand                 String
  model                 String
  type                  String
  plate_number          String
  inspection_date       DateTime
  before                Int
  expiry_date           DateTime
  status                status
  remarks               String?
  owner                 String
  front_img_url         String?
  back_img_url          String?
  side1_img_url         String?
  side2_img_url         String?
  original_receipt_url  String?
  car_registration_url  String?
  pgpc_inspection_image String?
  vehicle_parts         String[]
  project_id            String                       @db.Uuid
  created_at            DateTime                     @default(now())
  updated_at            DateTime                     @updatedAt
  created_by            String?                      @db.Uuid
  maintenance_reports   maintenance_vehicle_report[]
  user                  user?                        @relation("VehicleCreatedBy", fields: [created_by], references: [id])
  project               project                      @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([project_id])
  @@index([created_by])
  @@index([status])
  @@index([type])
  @@index([brand])
  @@index([plate_number])
  @@index([inspection_date])
  @@index([expiry_date])
  @@index([created_at])
  @@map("vehicles")
}

model maintenance_equipment_report {
  id                 String           @id @default(uuid()) @db.Uuid
  equipment_id       String           @db.Uuid
  location_id        String           @db.Uuid
  issue_description  String
  remarks            String?
  inspection_details String?
  action_taken       String?
  parts_replaced     String[]
  priority           report_priority?
  status             report_status?
  downtime_hours     String?
  date_repaired      DateTime?
  date_reported      DateTime         @default(now())
  attachment_urls    String[]
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  reported_by        String?          @db.Uuid
  repaired_by        String?          @db.Uuid
  equipment          equipment        @relation(fields: [equipment_id], references: [id], onDelete: Cascade)
  location           location         @relation(fields: [location_id], references: [id])
  repaired_user      user?            @relation("RepairedBy", fields: [repaired_by], references: [id])
  reported_user      user?            @relation("ReportedBy", fields: [reported_by], references: [id])

  @@index([equipment_id])
  @@index([location_id])
  @@index([reported_by])
  @@index([repaired_by])
  @@index([status])
  @@index([priority])
  @@index([date_reported])
  @@index([date_repaired])
  @@index([created_at])
  @@map("maintenance_equipment_reports")
}

model maintenance_vehicle_report {
  id                 String           @id @default(uuid()) @db.Uuid
  vehicle_id         String           @db.Uuid
  location_id        String           @db.Uuid
  issue_description  String
  remarks            String?
  inspection_details String?
  action_taken       String?
  parts_replaced     String[]
  priority           report_priority?
  status             report_status?
  downtime_hours     String?
  date_repaired      DateTime?
  date_reported      DateTime         @default(now())
  attachment_urls    String[]
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  reported_by        String?          @db.Uuid
  repaired_by        String?          @db.Uuid
  location           location         @relation(fields: [location_id], references: [id])
  repaired_user      user?            @relation("VehicleRepairedBy", fields: [repaired_by], references: [id])
  reported_user      user?            @relation("VehicleReportedBy", fields: [reported_by], references: [id])
  vehicle            vehicle          @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)

  @@index([vehicle_id])
  @@index([location_id])
  @@index([reported_by])
  @@index([repaired_by])
  @@index([status])
  @@index([priority])
  @@index([date_reported])
  @@index([date_repaired])
  @@index([created_at])
  @@map("maintenance_vehicle_reports")
}

enum Role {
  SUPERADMIN
  ADMIN
  VIEWER
}

enum user_status {
  ACTIVE
  INACTIVE
}

enum status {
  OPERATIONAL
  NON_OPERATIONAL
}

enum report_priority {
  LOW
  MEDIUM
  HIGH
}

enum report_status {
  REPORTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// CHAT APP TEMPORARILY DISABLED FOR PRODUCTION BUILD
// enum room_type {
//   DIRECT
//   GROUP
// }

// CHAT APP TEMPORARILY DISABLED FOR PRODUCTION BUILD
// enum message_type {
//   TEXT
//   IMAGE
//   FILE
//   SYSTEM
// }

// CHAT APP TEMPORARILY DISABLED FOR PRODUCTION BUILD
// enum invitation_status {
//   PENDING
//   ACCEPTED
//   DECLINED
//   CANCELLED
// }
